knitr::opts_chunk$set(echo = TRUE)
library(raster)
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SPRING_CAST2004/LULC_SUMMER_CAST2004.tif')
library(raster)
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SPRING_CAST2004/LULC_SPRING_CAST2004.tif')
### plot the raster
#plot(ar_land_use)
### take a look at the ar_land_use object
#ar_land_use
### raster manipulation example
#ar_rice <- calc(ar_land_use, fun=function(x){ x[x != 202] <- NA; return(x)} ) # substitute values all pixels where rice is not grown to 'NA'
library(sf)
library(spData)  # contains vector data describing outlines of US states
data(us_states)
### us_states is a simple feature object of type 'MULTIPOLYGON'
str(us_states)
### however, it has a different CRS than the raster we were using before
crs(us_states)
### if we want to plot on the same map, we will need to reproject to the same CRS
us_states_utm <- st_transform(us_states, crs(ar_rice))
knitr::opts_chunk$set(echo = TRUE)
library(raster)
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SPRING_CAST2004/LULC_SPRING_CAST2004.tif')
### plot the raster
plot(ar_land_use)
### take a look at the ar_land_use object
ar_land_use
### raster manipulation example
ar_rice <- calc(ar_land_use, fun=function(x){ x[x != 202] <- NA; return(x)} ) # substitute values for all pixels where rice is not grown to 'NA'
library(sf)
library(spData)  # contains vector data describing outlines of US states
data(us_states)
### us_states is a simple feature object of type 'MULTIPOLYGON'
str(us_states)
### however, it has a different CRS than the raster we were using before
crs(us_states)
### if we want to plot on the same map, we will need to reproject to the same CRS
us_states_utm <- st_transform(us_states, crs(ar_rice))
crs(us_states_utm)
crs(ar_rice) # all good!
str(ar_land_use)
ar_land_use
ar_land_use@values
ar_land_use$values
ar_land_use$$values
ar_land_use$LULC_SPRING_CAST2004
ar_land_use$LULC_SPRING_CAST2004$value s
ar_land_use$LULC_SPRING_CAST2004$values
ar_land_use$LULC_SPRING_CAST2004@values
ar_land_use$LULC_SPRING_CAST2004@data
ar_land_use$LULC_SPRING_CAST2004$values
library("maps")
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
head(states)
states <- cbind(states, st_coordinates(st_centroid(states)))
ggplot(data = world) +
geom_sf() +
geom_sf(data = states, fill = NA) +
geom_text(data = states, aes(X, Y, label = ID), size = 5) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
library(ggplot2)
ggplot(data = world) +
geom_sf() +
geom_sf(data = states, fill = NA) +
geom_text(data = states, aes(X, Y, label = ID), size = 5) +
coord_sf(xlim = c(-88, -78), ylim = c(24.5, 33), expand = FALSE)
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
counties <- subset(counties, grepl("arkansas", counties$ID))
counties
plot(counties)
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
head(states)
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
head(states)
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
counties <- subset(counties, grepl("arkansas", counties$ID))
counties
print(counties)
tail(counties)
str(counties)
crs(counties)
str(counties)
### if we want to plot on the same map, we will need to reproject to the same CRS
ar_counties_utm <- st_transform(counties, crs(ar_rice))
crs(ar_counties_utm)
crs(ar_rice) # all good!
plot(ar_counties_utm)
ar_counties_utm
subset(ar_counties_utm, ID == "arkansas,benton")
subset(ar_counties_utm, ID == "arkansas,benton")$geom
?st_as_sf
ar_rice
plot(ar_rice)
ar_rice <- calc(ar_land_use, fun=function(x){
# substitute values for all pixels where rice is not grown to 'NA'
x[x != 202] <- NA; return(x)
} )
ar_rice
ar_rice <- calc(ar_land_use, fun=function(x){
x[x != 202] <- NA; return(x)
} )
ar_rice
ar_land_use
ar_rice <- calc(ar_land_use, fun=function(x){ x[x != 202] <- NA; return(x)} )
ar_rice
ar_rice <- calc(ar_land_use, fun=function(x){x[x != 202] <- NA; return(x)} )
ar_rice
ar_land_use
hist(ar_land_use)
str(ar_land_use)
str(ar_land_use)@values
summary(ar_land_use)
str(ar_land_use)@values
ar_rice
ar_rice <- calc(ar_land_use, fun=function(x){x[x != 201] <- NA; return(x)} )
ar_rice
ar_rice <- calc(ar_land_use, fun=function(x){x[x != "202"] <- NA; return(x)} )
ar_rice
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SUMMER_CAST2004/LULC_SUMMER_CAST2004.tif')
ar_rice <- calc(ar_land_use, fun=function(x){x[x != 202] <- NA; return(x)} )
ar_rice
ar_counties_utm
?tm_borders
library(tmap)
library(tmaptools)
?tm_borders
tm_shape(ar_counties_utm) + # first, specify the shape object
tm_borders() # then, specify the aesthetic layer(s) for each shape object
?tm_borders
### of course, each layer can be customized in many ways
tm_shape(ar_counties_utm) + # first, specify the shape object
tm_borders(col = "purple") # then, specify the aesthetic layer(s) for each shape object
tm_shape(ar_counties_utm) + # first, specify the shape object
tm_borders(col = "purple") # then, specify the aesthetic layer(s) for each shape object
library(tmap)
library(tmaptools)
### a simple tmap
tm_shape(ar_counties_utm) + # first, specify the shape object
tm_borders() # second, specify the aesthetic layer(s) for each shape object
### of course, each layer can be customized in many ways
tm_shape(ar_counties_utm) +
tm_borders(col = "purple")
### see e.g.
?tm_borders
tm_shape(ar_rice) +
tm_raster() +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(col = "red") +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette.colors = c("red")) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = "viridis") +
tm_shape(ar_counties_utm) +
tm_borders()
### a more complicated map
tm_shape(ar_rice) +
tm_raster(palette = c("RdYlBl")) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = c("RdYlBu")) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = c("Bu")) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = c("Blues")) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = c("Greens")) +
tm_shape(ar_counties_utm) +
tm_borders()
### a more complicated map
tm_shape(ar_rice) +
tm_raster(palette = "viridis") +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = "viridis") +
tm_shape(ar_counties_utm) +
tm_borders()
### a more complicated map
tm_shape(ar_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_shape(ar_counties_utm) +
tm_borders()
tm_shape(ar_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_shape(ar_counties_utm) +
tm_polygon(fill = "grey70")
m_shape(ar_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70")
tm_shape(ar_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70")
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_rice) +
tm_raster(palette = "viridis", legend.show = F)
ar_soy_rice <- calc(ar_land_use,
# substitute values for all pixels where rice is not grown to 'NA'
fun=function(x){x[x != 202 | x != 201] <- NA; return(x)} )
ar_soy_rice
ar_soy_rice <- calc(ar_land_use,
# substitute values for all pixels where rice is not grown to 'NA'
fun=function(x){x[x != 202 || x != 201] <- NA; return(x)} )
ar_soy_rice
ar_soy_rice <- calc(ar_land_use,
# substitute values for all pixels where rice is not grown to 'NA'
fun=function(x){x[x != 202 && x != 201] <- NA; return(x)} )
ar_soy_rice
ar_soy_rice <- calc(ar_land_use,
# substitute values for all pixels where rice is not grown to 'NA'
fun=function(x){x[x != 202 & x != 201] <- NA; return(x)} )
ar_soy_rice
### a more complicated map
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis")
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis")
viridis(5)
viridis::cividis(5)
viridis::viridis(5)
viridis::viridis(5)[1]
viridis::viridis(5)[1,5]
viridis::viridis(5)[c(1,5)]
?viridis
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis") +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Agricultural land use")
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Agricultural land use")
?tm_add_legend
?tm_layout
### whereas our response (soy/rice) is a categorical variable,
### it is encoded as a number, hence the continuous legend
### let's add a manual legend instead
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Agricultural land use") +
tm_layout(legend.position = c("left","top"))
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Agricultural land use") +
tm_layout(legend.position = c("left","top"))
ar_map <- tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Land use") +
tm_layout(legend.position = c("left","top"))
ar_map
ar_map <- tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Land use") +
tm_layout(legend.position = "outside")
ar_map
### whereas our response (soy/rice) is a categorical variable,
### it is encoded as a number, hence the continuous legend
### let's add a manual legend instead
ar_map <- tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Land use") +
tm_layout(legend.outside = T)
ar_map
ar_map + tm_scale_bar()
?tm_scale_bar
ar_map + tm_scale_bar()
tm_shape(ar_counties_utm) +
tm_polygons(col = "purple")
tm_shape(ar_counties_utm) + # first, specify the shape object
tm_polygons()
ar_map <- tm_shape(ar_counties_utm) +
tm_polygons() +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Land use") +
tm_layout(legend.outside = T)
ar_map
### your tmap can be saved like so:
tm_save(ar_map, file = "AR_land_use.pdf")
### your tmap can be saved like so:
tmap_save(ar_map, file = "AR_land_use.pdf")
tmap_save(ar_map, file = "AR_land_use.pdf")
?maps
??maps
install.packages(c("maps", "rgdal", "raster", "sp", "sf","tmap","tmaptools"), dependencies = T)
install.packages(c("maps", "rgdal", "raster", "sp", "sf", "tmap", "tmaptools"), dependencies = T)
library(raster)
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SUMMER_CAST2004/LULC_SUMMER_CAST2004.tif')
### plot the raster
plot(ar_land_use)
### take a look at the ar_land_use object
ar_land_use
### raster manipulation example
ar_soy_rice <- calc(ar_land_use,
# substitute values for all pixels where rice/soybeans are not grown to 'NA'
fun=function(x){x[x != 202 & x != 201] <- NA; return(x)} )
ar_soy_rice
ar_soy_rice
knitr::opts_chunk$set(echo = TRUE)
library(raster)
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SUMMER_CAST2004/LULC_SUMMER_CAST2004.tif')
### plot the raster
plot(ar_land_use)
### plot the raster
plot(ar_land_use)
### plot the raster
plot(ar_land_use)
install.packages('maps')
library(raster)
### edit this line to point to place where raster in GeoTIFF file format is stored
ar_land_use <- raster('LULC_SUMMER_CAST2004/LULC_SUMMER_CAST2004.tif')
### plot the raster
plot(ar_land_use)
### take a look at the ar_land_use object
ar_land_use
### raster manipulation example
ar_soy_rice <- calc(ar_land_use,
# substitute values for all pixels where rice/soybeans are not grown to 'NA'
fun=function(x){x[x != 202 & x != 201] <- NA; return(x)} )
ar_soy_rice
plot(ar_soy_rice)
library(sf)
library(maps)  # contains maps of US states with state
# and county borders that can be retrieved as sf objects
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
head(states)
counties <- st_as_sf(map("county", plot = FALSE, fill = TRUE))
counties <- subset(counties, grepl("arkansas", counties$ID))
### counties is a simple feature object of type 'MULTIPOLYGON'
str(counties)
### however, it has a different CRS than the raster we were using before
crs(counties)
### if we want to plot on the same map, we will need to reproject to the same CRS
ar_counties_utm <- st_transform(counties, crs(ar_soy_rice))
crs(ar_counties_utm)
crs(ar_soy_rice) # now they match, we're good!
### take a quick look at the polygon data
plot(ar_counties_utm)
library(tmap)
library(tmaptools)
### a simple tmap
tm_shape(ar_counties_utm) + # first, specify the shape object
tm_polygons()             # second, specify the aesthetic layer(s) for each shape object
?tm_polygons
### of course, each layer can be customized in many ways
tm_shape(ar_counties_utm) +
tm_polygons(col = "purple")
### a more complicated map
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis")
### let's add a manual legend instead
ar_map <-
tm_shape(ar_counties_utm) +
tm_polygons() +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Land use") +
tm_layout(legend.outside = T)
### let's add a manual legend instead
ar_map <-
tm_shape(ar_counties_utm) +
tm_polygons() +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis", legend.show = F) +
tm_add_legend("fill",
col = viridis::viridis(5)[c(1,5)], # specifying first and fifth color from a vector of 5 colors from the viridis palette
labels = c("Soybean","Rice"),
title = "Land use") +
tm_layout(legend.outside = T)
ar_map
?tm_scale_bar
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis") +
tm_scale_bar()
?tm_scale_bar
### a more complicated map
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis") +
tm_scale_bar(position = ("left","bottom"))
tm_scale_bar(position = (c("left","bottom"))
### a more complicated map
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis") +
tm_scale_bar(position = (c("left","bottom")))
### a more complicated map
tm_shape(ar_counties_utm) +
tm_polygons(fill = "grey70") +
tm_shape(ar_soy_rice) +
tm_raster(palette = "viridis") +
tm_scale_bar(position = c("left","bottom"))
